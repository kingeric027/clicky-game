{"version":3,"sources":["components/wrapper/index.js","components/navbar/index.js","components/factdiv/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Navbar","href","correct","score","high","Factdiv","fact","App","state","parks","guess","shuffle","initial","array","i","length","tmp","current","top","Math","floor","random","newArray","j","push","validate","event","parkIndex","target","id","console","log","_this","count","reset","setState","_this2","this","navbar","factdiv","wrapper","map","park","index","key","onClick","style","backgroundImage","url","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.07b56a87.chunk.js","sourcesContent":["\nimport React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar(props) {\n    return (\n    <nav className = \"navbar\">\n        <ul>\n            <li className=\"brand\">\n                <a href=\"/\"><strong>National Parks Clicky-Game!</strong></a>\n            </li>\n            <li>\n                <h5>{props.correct}</h5>\n            </li>\n            <li>\n                <h5>Score: {props.score} | Top Score: {props.high}</h5>\n            </li>\n        </ul>\n    </nav>\n  \n    );\n};\n\nexport default Navbar;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Factdiv(props) {\n  return <div className=\"fact-div\">\n  <p>{props.fact}</p>\n  </div>;\n}\n\nexport default Factdiv;","import React, { Component } from 'react';\nimport Wrapper from \"./components/wrapper\";\nimport parks from \"./parks.json\";\nimport Navbar from \"./components/navbar\";\nimport Factdiv from \"./components/factdiv\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    parks,\n    guess:\"Click on an image to begin\",\n    score:0,\n    high:0,\n    fact:\"\"\n  }\n\n  //If Item has been clicked add one to the count\n  //handleIncrement = () =>{\n  //  this.setState({ count: this.state.count + 1 });\n  //}\n  \n  //function to shuffle an array \"initial\"\n  shuffle = (initial) => {\n    for (var array=[],i=0;i<initial.length;++i) array[i]=i;\n    var tmp, current, top = initial.length;\n    if(top) while(--top) {\n      current = Math.floor(Math.random() * (top + 1));\n      tmp = array[current];\n      array[current] = array[top];\n      array[top] = tmp;\n  }\n  var newArray = []\n  for(var j = 0; j<array.length; j++){\n    newArray.push(initial[array[j]]);\n  }\n  return newArray;\n  }\n\n  validate = (event) =>{\n    var parkIndex = event.target.id;\n    console.log(this.state.parks[parkIndex].count);\n    if(this.state.parks[parkIndex].count>0){\n      this.reset();\n    }else {\n      this.setState({guess:\"Correct!\"});\n      this.setState({ score: this.state.score + 1 });\n      this.setState({fact:parks[parkIndex].fact});\n    }\n    parks[parkIndex].count +=1;\n    this.setState({parks:this.shuffle(parks)});\n    \n    \n    console.log(this.shuffle(parks));\n  }\n\n  reset = () =>{\n    this.setState({guess: \"Incorrect!\"})\n    this.setState({score: 0})\n    this.setState({fact: \"\"})\n    for(var i=0; i<parks.length; i++){\n      parks[i].count = 0;\n    }\n    this.setState({parks:this.shuffle(parks)})\n    if(this.state.score>this.state.high){\n      this.setState({high:this.state.score})\n    }\n  }\n\n  //map over this.state.parks and render a parkcard\n  render() {\n    return (\n      <div>\n        <Navbar \n          correct = {this.state.guess}\n          score = {this.state.score}\n          high = {this.state.high}\n        \n        />\n        <div className=\"container\">\n        <Factdiv \n        fact = {this.state.fact}\n        />\n        <Wrapper>\n          {this.state.parks.map((park,index) => ( \n            \n              \n              <div\n                id = {park.id}\n                className = \"park-div\"\n                key={index}\n                onClick = {this.validate}\n                style = { {backgroundImage: \"url(\"+park.url+\")\"} }\n              />\n            \n          ))}\n          </Wrapper>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}